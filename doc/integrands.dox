/**

\defgroup integrands Integrand Functions

\brief The form of integrands that can be integrated by the `hep-mc` library.

Functions that are integrated by the Monte Carlo algorithms must accept a single parameter of the
type \ref hep::mc_point and return a value of type `T`. For example, an integrand of the form
\f[
f(x) := x^2
\f]
for double precision numbers would look like:
\code
double square(hep::mc_point<double> const& x)
{
    return x.point[0] * x.point[0];
}
\endcode
Some integration algorithms, e.g. the \ref vegas, supply additional information that can be accessed
by capturing the argument with a different type, e.g. for VEGAS by `hep::vegas_point` instead of
`hep::mc_point`:
\code
double square(hep::vegas_point<double> const& x)
{
    return x.point[0] * x.point[0];
}
\endcode

If additional variables in the integrand are necessary, they can be supplied by global variables or
using functors:
\code
struct integrand
{
    double exponent;

    integrand(double exponent)
        : exponent(exponent)
    {
    }

    double operator()(hep::mc_point<double> const& x)
    {
        return std::pow(x.point[0], exponent);
    }
};
\endcode
which would be called using the \ref plain by
\code
hep::mc_result<double> result = hep::plain<double>(1, 1000, integrand(2.0));
\endcode

*/
