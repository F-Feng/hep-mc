namespace hep
{

/**

\defgroup callbacks Callback functions

\brief Obtaining intermediate results as fast as possible.

The primary way of obtaining the result(s) of an integration is by waiting for the integration to
finish and inspecting the return value of the integrator. However, usually the integration is
subdivided into a number of smaller iterations, each of which are available much faster than the
final combined result. Therefore callback function provide a secondary way of obtaining the
intermediate results as soon as possible. The integrator simply calls this callback function with a
newly created checkpoint that contains the results of the recently finished iterations and all of
the iterations before, together with the random number generators, which were used to calculate the
results.

Each callback function must accept the appropriate checkpoint, for example, in the case of VEGAS a
\ref vegas_chkpt. In the case of MPI-parallelized integration routines the
first argument must be instead the the communicator and the second one the checkpoint.

Finally, the callback function must return a boolean that signals whether the remaining iterations
should be performed or not. Returning `false` can used to implement a callback function which stop
the integrator when a certain level of precision is reached, see \ref vegas_stop_after_precision.cpp
for an example how to implement this.

This library comes with two predefined callback function types, \ref callback and \ref mpi_callback,
which are used for every integration algorithm and their parallelised counterparts, respectively.

*/

}
