#include "gtest/gtest.h"

#ifndef HEP_USE_MPI
#include "hep/mc.hpp"
#else
#include "hep/mc-mpi.hpp"
#endif

#include <cmath>
#include <cstddef>
//#include <iostream>
//#include <limits>
#include <tuple>
#include <vector>

template <typename T>
T arctan(hep::mc_point<T> const& point, hep::projector<T>& projector)
{
	T const x = T(10.0) * point.point().at(0) - T(5.0);
	T const f = std::atan(x);

	projector.add(0, x, f);

	return f;
}

template <typename T>
std::vector<std::tuple<T, T>> reference_results();

template <>
std::vector<std::tuple<float, float>> reference_results() {
	return {
		std::make_tuple(-1.422207505e-01f, 4.393517040e-03f),
		std::make_tuple(-1.385217905e-01f, 4.330167081e-03f),
		std::make_tuple(-1.335975975e-01f, 4.246678203e-03f),
		std::make_tuple(-1.300524771e-01f, 4.183858167e-03f),
		std::make_tuple(-1.292105913e-01f, 4.163369536e-03f),
		std::make_tuple(-1.452316344e-01f, 4.403605126e-03f),
		std::make_tuple(-1.334127337e-01f, 4.214819521e-03f),
		std::make_tuple(-1.379859298e-01f, 4.277306609e-03f),
		std::make_tuple(-1.362247318e-01f, 4.241476301e-03f),
		std::make_tuple(-1.411188990e-01f, 4.307318013e-03f),
		std::make_tuple(-1.322819293e-01f, 4.162178375e-03f),
		std::make_tuple(-1.312738210e-01f, 4.136731382e-03f),
		std::make_tuple(-1.321882159e-01f, 4.140451550e-03f),
		std::make_tuple(-1.266991049e-01f, 4.044100642e-03f),
		std::make_tuple(-1.316971928e-01f, 4.110690672e-03f),
		std::make_tuple(-1.262891591e-01f, 4.014368635e-03f),
		std::make_tuple(-1.319138855e-01f, 4.089090507e-03f),
		std::make_tuple(-1.211211458e-01f, 3.906855825e-03f),
		std::make_tuple(-1.250770092e-01f, 3.955509979e-03f),
		std::make_tuple(-1.259078383e-01f, 3.953645471e-03f),
		std::make_tuple(-1.245118156e-01f, 3.915726673e-03f),
		std::make_tuple(-1.266511828e-01f, 3.931750078e-03f),
		std::make_tuple(-1.201196462e-01f, 3.812378272e-03f),
		std::make_tuple(-1.208647490e-01f, 3.804878797e-03f),
		std::make_tuple(-1.216051877e-01f, 3.795702709e-03f),
		std::make_tuple(-1.242105588e-01f, 3.813086310e-03f),
		std::make_tuple(-1.155518070e-01f, 3.656165907e-03f),
		std::make_tuple(-1.172215044e-01f, 3.657066729e-03f),
		std::make_tuple(-1.100364476e-01f, 3.517765552e-03f),
		std::make_tuple(-1.116607040e-01f, 3.513383446e-03f),
		std::make_tuple(-1.093651429e-01f, 3.446391784e-03f),
		std::make_tuple(-1.059036627e-01f, 3.357787617e-03f),
		std::make_tuple(-1.087481678e-01f, 3.364469856e-03f),
		std::make_tuple(-1.028217003e-01f, 3.232054412e-03f),
		std::make_tuple(-9.637179971e-02f, 3.085829550e-03f),
		std::make_tuple(-9.736479819e-02f, 3.052900778e-03f),
		std::make_tuple(-9.348310530e-02f, 2.938603284e-03f),
		std::make_tuple(-9.486856312e-02f, 2.900012769e-03f),
		std::make_tuple(-8.905377239e-02f, 2.746023703e-03f),
		std::make_tuple(-8.166727424e-02f, 2.558389679e-03f),
		std::make_tuple(-7.518150657e-02f, 2.379263286e-03f),
		std::make_tuple(-6.661252677e-02f, 2.156104194e-03f),
		std::make_tuple(-6.176748499e-02f, 1.985845389e-03f),
		std::make_tuple(-5.849328637e-02f, 1.827820903e-03f),
		std::make_tuple(-5.094397068e-02f, 1.595583046e-03f),
		std::make_tuple(-4.241841286e-02f, 1.334870816e-03f),
		std::make_tuple(-3.331119195e-02f, 1.056220732e-03f),
		std::make_tuple(-2.300948091e-02f, 7.523062523e-04f),
		std::make_tuple(-1.415737346e-02f, 4.629279138e-04f),
		std::make_tuple(-4.837230314e-03f, 1.787348156e-04f),
		std::make_tuple( 5.396419670e-03f, 1.896403410e-04f),
		std::make_tuple( 1.475971658e-02f, 4.750054213e-04f),
		std::make_tuple( 2.384997718e-02f, 7.639415562e-04f),
		std::make_tuple( 3.437981755e-02f, 1.070512924e-03f),
		std::make_tuple( 4.380803555e-02f, 1.355508692e-03f),
		std::make_tuple( 4.981681705e-02f, 1.576246577e-03f),
		std::make_tuple( 5.592492595e-02f, 1.787068788e-03f),
		std::make_tuple( 6.369324028e-02f, 2.014062367e-03f),
		std::make_tuple( 6.963974983e-02f, 2.205198398e-03f),
		std::make_tuple( 7.740443200e-02f, 2.414114075e-03f),
		std::make_tuple( 8.338880539e-02f, 2.585271141e-03f),
		std::make_tuple( 8.875904232e-02f, 2.740910277e-03f),
		std::make_tuple( 8.711087704e-02f, 2.780698240e-03f),
		std::make_tuple( 9.681382775e-02f, 2.989528002e-03f),
		std::make_tuple( 9.601873159e-02f, 3.032054752e-03f),
		std::make_tuple( 1.027042940e-01f, 3.183754859e-03f),
		std::make_tuple( 1.034223437e-01f, 3.241146682e-03f),
		std::make_tuple( 1.069436520e-01f, 3.336467547e-03f),
		std::make_tuple( 1.124491021e-01f, 3.458735300e-03f),
		std::make_tuple( 1.068186164e-01f, 3.406045493e-03f),
		std::make_tuple( 1.105748862e-01f, 3.496922785e-03f),
		std::make_tuple( 1.096754670e-01f, 3.511720803e-03f),
		std::make_tuple( 1.113379300e-01f, 3.564945422e-03f),
		std::make_tuple( 1.133108959e-01f, 3.620549105e-03f),
		std::make_tuple( 1.158614829e-01f, 3.684818279e-03f),
		std::make_tuple( 1.185008958e-01f, 3.747555893e-03f),
		std::make_tuple( 1.164165512e-01f, 3.735358128e-03f),
		std::make_tuple( 1.274705976e-01f, 3.926404286e-03f),
		std::make_tuple( 1.241830140e-01f, 3.893617773e-03f),
		std::make_tuple( 1.260100603e-01f, 3.939061891e-03f),
		std::make_tuple( 1.267634928e-01f, 3.966572229e-03f),
		std::make_tuple( 1.245542541e-01f, 3.947040532e-03f),
		std::make_tuple( 1.217584088e-01f, 3.917038906e-03f),
		std::make_tuple( 1.304825097e-01f, 4.066717811e-03f),
		std::make_tuple( 1.284801811e-01f, 4.048700444e-03f),
		std::make_tuple( 1.291157007e-01f, 4.070788622e-03f),
		std::make_tuple( 1.318973601e-01f, 4.125149921e-03f),
		std::make_tuple( 1.302398890e-01f, 4.110401496e-03f),
		std::make_tuple( 1.294326931e-01f, 4.107946530e-03f),
		std::make_tuple( 1.329470724e-01f, 4.172581714e-03f),
		std::make_tuple( 1.388574392e-01f, 4.272995051e-03f),
		std::make_tuple( 1.348991394e-01f, 4.221138544e-03f),
		std::make_tuple( 1.355781108e-01f, 4.240266513e-03f),
		std::make_tuple( 1.327354908e-01f, 4.204138182e-03f),
		std::make_tuple( 1.268834472e-01f, 4.119009245e-03f),
		std::make_tuple( 1.335479319e-01f, 4.232035019e-03f),
		std::make_tuple( 1.307285726e-01f, 4.194559995e-03f),
		std::make_tuple( 1.365921497e-01f, 4.293460399e-03f),
		std::make_tuple( 1.351051331e-01f, 4.277003929e-03f),
		std::make_tuple( 1.393352002e-01f, 4.349094350e-03f)
	};
}

template <>
std::vector<std::tuple<double, double>> reference_results() {
	return {
		std::make_tuple(-1.46062895674219678e-01, 4.45186920179325117e-03),
		std::make_tuple(-1.38383315518037703e-01, 4.32799825774073457e-03),
		std::make_tuple(-1.37011373848747731e-01, 4.30013976783901082e-03),
		std::make_tuple(-1.36305614022243643e-01, 4.28229576301420670e-03),
		std::make_tuple(-1.33006168403048713e-01, 4.22352917219738239e-03),
		std::make_tuple(-1.41044253517556339e-01, 4.34028785994627821e-03),
		std::make_tuple(-1.39059761088374506e-01, 4.30216077011683507e-03),
		std::make_tuple(-1.34639075424061949e-01, 4.22568550960213379e-03),
		std::make_tuple(-1.35696467630828238e-01, 4.23341509211642465e-03),
		std::make_tuple(-1.38461589187382883e-01, 4.26700775739668331e-03),
		std::make_tuple(-1.39828944180758835e-01, 4.27813680126358249e-03),
		std::make_tuple(-1.33508599011471302e-01, 4.17137991105926646e-03),
		std::make_tuple(-1.27605873855128810e-01, 4.06881970937552143e-03),
		std::make_tuple(-1.26557818641178266e-01, 4.04169220712428598e-03),
		std::make_tuple(-1.30913141494322122e-01, 4.09846258299691787e-03),
		std::make_tuple(-1.22165750046795515e-01, 3.94893281909160405e-03),
		std::make_tuple(-1.31648002391513697e-01, 4.08485615388714564e-03),
		std::make_tuple(-1.24820338996423766e-01, 3.96563869015906147e-03),
		std::make_tuple(-1.25454029175437076e-01, 3.96137569994712592e-03),
		std::make_tuple(-1.22136469714698437e-01, 3.89442883033362230e-03),
		std::make_tuple(-1.23142863613100020e-01, 3.89434699235191280e-03),
		std::make_tuple(-1.24443404130591156e-01, 3.89787377771853242e-03),
		std::make_tuple(-1.22830824627719104e-01, 3.85509264780110363e-03),
		std::make_tuple(-1.21347277749396340e-01, 3.81236674837186771e-03),
		std::make_tuple(-1.24853577912050151e-01, 3.84579902730760714e-03),
		std::make_tuple(-1.24219954775092969e-01, 3.81337344453488471e-03),
		std::make_tuple(-1.11108534382087940e-01, 3.58581121873030985e-03),
		std::make_tuple(-1.19052941542855131e-01, 3.68503016302485159e-03),
		std::make_tuple(-1.15248412594843197e-01, 3.59909666992302328e-03),
		std::make_tuple(-1.09986694233027718e-01, 3.48722614751904641e-03),
		std::make_tuple(-1.14178738107540978e-01, 3.52043465169944942e-03),
		std::make_tuple(-1.05694718142120087e-01, 3.35460476547619606e-03),
		std::make_tuple(-1.05575432441922287e-01, 3.31525818969300237e-03),
		std::make_tuple(-9.81770312783891291e-02, 3.15849560465065928e-03),
		std::make_tuple(-9.46939834744321002e-02, 3.05940258282466583e-03),
		std::make_tuple(-9.65018062301785662e-02, 3.03958897253173458e-03),
		std::make_tuple(-9.61537162766426673e-02, 2.97930723126558356e-03),
		std::make_tuple(-9.66678806409632801e-02, 2.92720716973003192e-03),
		std::make_tuple(-8.56458444174822281e-02, 2.69237764223496413e-03),
		std::make_tuple(-7.67127097572512517e-02, 2.48136250910562569e-03),
		std::make_tuple(-7.73122611233621471e-02, 2.41123768497190439e-03),
		std::make_tuple(-6.49909751410068515e-02, 2.12993122200481541e-03),
		std::make_tuple(-6.16972258568617357e-02, 1.98463059105612009e-03),
		std::make_tuple(-5.60813610416365099e-02, 1.79120779975757674e-03),
		std::make_tuple(-4.92533694485365117e-02, 1.56872718861242257e-03),
		std::make_tuple(-4.36262255825479589e-02, 1.35257369990297708e-03),
		std::make_tuple(-3.32175886627812389e-02, 1.05525844875782940e-03),
		std::make_tuple(-2.42036052266181093e-02, 7.72437798162451230e-04),
		std::make_tuple(-1.37707437460951546e-02, 4.58691897566457360e-04),
		std::make_tuple(-5.12595603271318642e-03, 1.83888523783724969e-04),
		std::make_tuple( 5.23654403608861570e-03, 1.86268756595458471e-04),
		std::make_tuple( 1.47335199998688601e-02, 4.73672166782722088e-04),
		std::make_tuple( 2.44480974819863590e-02, 7.75106309620473698e-04),
		std::make_tuple( 3.39772616968988389e-02, 1.06644435081443777e-03),
		std::make_tuple( 4.31444781653115908e-02, 1.34627251095347780e-03),
		std::make_tuple( 4.79679679782057874e-02, 1.54714714192241416e-03),
		std::make_tuple( 5.75460269663495630e-02, 1.81266959535347598e-03),
		std::make_tuple( 6.42953478239563642e-02, 2.02486424496063156e-03),
		std::make_tuple( 7.08404613650273768e-02, 2.22288581521031198e-03),
		std::make_tuple( 7.79219766403739245e-02, 2.42066254707808430e-03),
		std::make_tuple( 8.04402702894875393e-02, 2.53907917676965194e-03),
		std::make_tuple( 8.89595352668637457e-02, 2.74444190307994397e-03),
		std::make_tuple( 9.15685333222310549e-02, 2.84987453171321389e-03),
		std::make_tuple( 9.78804994839993919e-02, 3.00640408427699886e-03),
		std::make_tuple( 9.75815174051670176e-02, 3.05663009900943678e-03),
		std::make_tuple( 9.90540020119096143e-02, 3.12786463932624792e-03),
		std::make_tuple( 1.00661202984520817e-01, 3.19816673725979500e-03),
		std::make_tuple( 1.08400399600382655e-01, 3.35863970690873778e-03),
		std::make_tuple( 1.07520213543842891e-01, 3.38312529359761135e-03),
		std::make_tuple( 1.05958123244518559e-01, 3.39270735323959774e-03),
		std::make_tuple( 1.11585922595754186e-01, 3.51280319294145372e-03),
		std::make_tuple( 1.11141031329480389e-01, 3.53470594262288162e-03),
		std::make_tuple( 1.12243690447129119e-01, 3.57901144613286936e-03),
		std::make_tuple( 1.13682593203311449e-01, 3.62676671782486120e-03),
		std::make_tuple( 1.19163006895650653e-01, 3.73623125904973307e-03),
		std::make_tuple( 1.16102787449477635e-01, 3.70974893584087540e-03),
		std::make_tuple( 1.19550076251870904e-01, 3.78459492664121131e-03),
		std::make_tuple( 1.21224456499411298e-01, 3.82977636936750101e-03),
		std::make_tuple( 1.27026296555639018e-01, 3.93758964925896258e-03),
		std::make_tuple( 1.29123180723969333e-01, 3.98697284458973938e-03),
		std::make_tuple( 1.25515814863285863e-01, 3.94729976740389957e-03),
		std::make_tuple( 1.26576772355358108e-01, 3.97865675595015372e-03),
		std::make_tuple( 1.26970668413706578e-01, 3.99910777794641736e-03),
		std::make_tuple( 1.36127152154687237e-01, 4.15298551100627689e-03),
		std::make_tuple( 1.25896195661268112e-01, 4.00807821837082402e-03),
		std::make_tuple( 1.25871251532809675e-01, 4.01976698136796446e-03),
		std::make_tuple( 1.31642442738590215e-01, 4.12129389878206076e-03),
		std::make_tuple( 1.32997202263708786e-01, 4.15333358040087530e-03),
		std::make_tuple( 1.34174675853360237e-01, 4.18178775192480992e-03),
		std::make_tuple( 1.30567627522466673e-01, 4.13547678775225049e-03),
		std::make_tuple( 1.33534041470525500e-01, 4.19100434038985597e-03),
		std::make_tuple( 1.35169093235071258e-01, 4.22536511878975757e-03),
		std::make_tuple( 1.36657337995358757e-01, 4.25705288538784105e-03),
		std::make_tuple( 1.31255652627716851e-01, 4.18086133396038465e-03),
		std::make_tuple( 1.24038876387482955e-01, 4.07284299585141448e-03),
		std::make_tuple( 1.31242392961190418e-01, 4.19565935247652975e-03),
		std::make_tuple( 1.33723596875582468e-01, 4.24195017642136317e-03),
		std::make_tuple( 1.31834703593884855e-01, 4.21899324611042879e-03),
		std::make_tuple( 1.36198696002689495e-01, 4.29409833496022155e-03),
		std::make_tuple( 1.38376363547853876e-01, 4.33427539945384008e-03)
	};
}

template <>
std::vector<std::tuple<long double, long double>> reference_results() {
	return {
		std::make_tuple(-1.460628956742196780022e-01l, 4.451869201793252750488e-03l),
		std::make_tuple(-1.383833155180377193683e-01l, 4.327998257740734521051e-03l),
		std::make_tuple(-1.370113738487477374634e-01l, 4.300139767839012596709e-03l),
		std::make_tuple(-1.363056140222436378163e-01l, 4.282295763014207141762e-03l),
		std::make_tuple(-1.330061684030487174376e-01l, 4.223529172197381178705e-03l),
		std::make_tuple(-1.410442535175563248700e-01l, 4.340287859946279235965e-03l),
		std::make_tuple(-1.390597610883745141879e-01l, 4.302160770116834401527e-03l),
		std::make_tuple(-1.346390754240619375701e-01l, 4.225685509602133605435e-03l),
		std::make_tuple(-1.356964676308282360728e-01l, 4.233415092116423435082e-03l),
		std::make_tuple(-1.384615891873828751003e-01l, 4.267007757396684331493e-03l),
		std::make_tuple(-1.398289441807588144280e-01l, 4.278136801263582239114e-03l),
		std::make_tuple(-1.335085990114713098005e-01l, 4.171379911059266711067e-03l),
		std::make_tuple(-1.276058738551288092533e-01l, 4.068819709375521663791e-03l),
		std::make_tuple(-1.265578186411782466575e-01l, 4.041692207124285948386e-03l),
		std::make_tuple(-1.309131414943221194110e-01l, 4.098462582996913925492e-03l),
		std::make_tuple(-1.221657500467954991457e-01l, 3.948932819091603749162e-03l),
		std::make_tuple(-1.316480023915136849939e-01l, 4.084856153887144211510e-03l),
		std::make_tuple(-1.248203389964237655039e-01l, 3.965638690159061286056e-03l),
		std::make_tuple(-1.254540291754370716349e-01l, 3.961375699947127730543e-03l),
		std::make_tuple(-1.221364697146984359201e-01l, 3.894428830333621742325e-03l),
		std::make_tuple(-1.231428636131000177724e-01l, 3.894346992351915574525e-03l),
		std::make_tuple(-1.244434041305911405607e-01l, 3.897873777718532827460e-03l),
		std::make_tuple(-1.228308246277191094912e-01l, 3.855092647801105127674e-03l),
		std::make_tuple(-1.213472777493963272743e-01l, 3.812366748371865817725e-03l),
		std::make_tuple(-1.248535779120501468145e-01l, 3.845799027307605850076e-03l),
		std::make_tuple(-1.242199547750929774730e-01l, 3.813373444534884952397e-03l),
		std::make_tuple(-1.111085343820879424906e-01l, 3.585811218730309711362e-03l),
		std::make_tuple(-1.190529415428551414106e-01l, 3.685030163024851432401e-03l),
		std::make_tuple(-1.152484125948432045137e-01l, 3.599096669923023254969e-03l),
		std::make_tuple(-1.099866942330277109599e-01l, 3.487226147519046575711e-03l),
		std::make_tuple(-1.141787381075409667290e-01l, 3.520434651699451523004e-03l),
		std::make_tuple(-1.056947181421200853150e-01l, 3.354604765476195675713e-03l),
		std::make_tuple(-1.055754324419222880832e-01l, 3.315258189693002407509e-03l),
		std::make_tuple(-9.817703127838913138166e-02l, 3.158495604650657468591e-03l),
		std::make_tuple(-9.469398347443208821116e-02l, 3.059402582824664542644e-03l),
		std::make_tuple(-9.650180623017857498399e-02l, 3.039588972531733675056e-03l),
		std::make_tuple(-9.615371627664266639883e-02l, 2.979307231265583842334e-03l),
		std::make_tuple(-9.666788064096327973439e-02l, 2.927207169730036165869e-03l),
		std::make_tuple(-8.564584441748221158778e-02l, 2.692377642234966270237e-03l),
		std::make_tuple(-7.671270975725125009431e-02l, 2.481362509105624200369e-03l),
		std::make_tuple(-7.731226112336214686737e-02l, 2.411237684971905500065e-03l),
		std::make_tuple(-6.499097514100685262639e-02l, 2.129931222004817611545e-03l),
		std::make_tuple(-6.169722585686173256455e-02l, 1.984630591056119444042e-03l),
		std::make_tuple(-5.608136104163651300975e-02l, 1.791207799757576677889e-03l),
		std::make_tuple(-4.925336944853651770110e-02l, 1.568727188612422872907e-03l),
		std::make_tuple(-4.362622558254796087859e-02l, 1.352573699902977511797e-03l),
		std::make_tuple(-3.321758866278123684872e-02l, 1.055258448757829143495e-03l),
		std::make_tuple(-2.420360522661811225868e-02l, 7.724377981624511592068e-04l),
		std::make_tuple(-1.377074374609515504692e-02l, 4.586918975664574760698e-04l),
		std::make_tuple(-5.125956032713187185572e-03l, 1.838885237837249284961e-04l),
		std::make_tuple( 5.236544036088612739461e-03l, 1.862687565954584560694e-04l),
		std::make_tuple( 1.473351999986886106126e-02l, 4.736721667827219644823e-04l),
		std::make_tuple( 2.444809748198636201840e-02l, 7.751063096204739544043e-04l),
		std::make_tuple( 3.397726169689884430592e-02l, 1.066444350814438689437e-03l),
		std::make_tuple( 4.314447816531158887599e-02l, 1.346272510953477298973e-03l),
		std::make_tuple( 4.796796797820578856739e-02l, 1.547147141922412500649e-03l),
		std::make_tuple( 5.754602696634955644289e-02l, 1.812669595353476567787e-03l),
		std::make_tuple( 6.429534782395635809910e-02l, 2.024864244960631643113e-03l),
		std::make_tuple( 7.084046136502737276499e-02l, 2.222885815210312228836e-03l),
		std::make_tuple( 7.792197664037391797602e-02l, 2.420662547078085931358e-03l),
		std::make_tuple( 8.044027028948754283369e-02l, 2.539079176769651638555e-03l),
		std::make_tuple( 8.895953526686374351548e-02l, 2.744441903079943032409e-03l),
		std::make_tuple( 9.156853332223104432054e-02l, 2.849874531713213574317e-03l),
		std::make_tuple( 9.788049948399938694245e-02l, 3.006404084276999873402e-03l),
		std::make_tuple( 9.758151740516702307633e-02l, 3.056630099009434730771e-03l),
		std::make_tuple( 9.905400201190961359803e-02l, 3.127864639326249665754e-03l),
		std::make_tuple( 1.006612029845208313122e-01l, 3.198166737259796679274e-03l),
		std::make_tuple( 1.084003996003826710806e-01l, 3.358639706908736276550e-03l),
		std::make_tuple( 1.075202135438428902088e-01l, 3.383125293597613087177e-03l),
		std::make_tuple( 1.059581232445185625346e-01l, 3.392707353239597429191e-03l),
		std::make_tuple( 1.115859225957541944223e-01l, 3.512803192941454450126e-03l),
		std::make_tuple( 1.111410313294803919903e-01l, 3.534705942622882767017e-03l),
		std::make_tuple( 1.122436904471291232977e-01l, 3.579011446132868012997e-03l),
		std::make_tuple( 1.136825932033114475142e-01l, 3.626766717824861485549e-03l),
		std::make_tuple( 1.191630068956506403316e-01l, 3.736231259049731052683e-03l),
		std::make_tuple( 1.161027874494776367096e-01l, 3.709748935840877327515e-03l),
		std::make_tuple( 1.195500762518709148789e-01l, 3.784594926641211915215e-03l),
		std::make_tuple( 1.212244564994113136326e-01l, 3.829776369367503075729e-03l),
		std::make_tuple( 1.270262965556390151396e-01l, 3.937589649258962403847e-03l),
		std::make_tuple( 1.291231807239693347295e-01l, 3.986972844589742041238e-03l),
		std::make_tuple( 1.255158148632858388158e-01l, 3.947299767403899243636e-03l),
		std::make_tuple( 1.265767723553581174508e-01l, 3.978656755950156466753e-03l),
		std::make_tuple( 1.269706684137065870726e-01l, 3.999107777946417777801e-03l),
		std::make_tuple( 1.361271521546872144030e-01l, 4.152985511006277474211e-03l),
		std::make_tuple( 1.258961956612681229082e-01l, 4.008078218370823136228e-03l),
		std::make_tuple( 1.258712515328096832114e-01l, 4.019766981367961426353e-03l),
		std::make_tuple( 1.316424427385902215916e-01l, 4.121293898782061319207e-03l),
		std::make_tuple( 1.329972022637087847297e-01l, 4.153333580400875965925e-03l),
		std::make_tuple( 1.341746758533602313301e-01l, 4.181787751924810053072e-03l),
		std::make_tuple( 1.305676275224666627213e-01l, 4.135476787752248395952e-03l),
		std::make_tuple( 1.335340414705254969785e-01l, 4.191004340389856998566e-03l),
		std::make_tuple( 1.351690932350712495415e-01l, 4.225365118789755328508e-03l),
		std::make_tuple( 1.366573379953587655266e-01l, 4.257052885387840395859e-03l),
		std::make_tuple( 1.312556526277168265573e-01l, 4.180861333960386947748e-03l),
		std::make_tuple( 1.240388763874829766720e-01l, 4.072842995851416066468e-03l),
		std::make_tuple( 1.312423929611904246392e-01l, 4.195659352476528259803e-03l),
		std::make_tuple( 1.337235968755824662511e-01l, 4.241950176421364324417e-03l),
		std::make_tuple( 1.318347035938848359860e-01l, 4.218993246110429326672e-03l),
		std::make_tuple( 1.361986960026895018144e-01l, 4.294098334960222472598e-03l),
		std::make_tuple( 1.383763635478538660744e-01l, 4.334275399453842722752e-03l)
	};
}

typedef testing::Types<float, double, long double> MyT;
template <typename T> class DistributionResults : public testing::Test { };
TYPED_TEST_CASE(DistributionResults, MyT);

TYPED_TEST(DistributionResults, CheckPlainIntegration)
{
	using T = TypeParam;

	std::size_t const calls = 100000;

#ifndef HEP_USE_MPI
	auto const result = hep::plain(
#else
	auto const result = hep::mpi_plain(
		MPI_COMM_WORLD,
#endif
		hep::make_integrand<T>(
			arctan<T>,
			1,
			hep::make_dist_params<T>(100, T(-5.0), T(5.0))
		),
		calls
	);

	auto const distribution = result.distributions().at(0).results();
	auto const reference = reference_results<T>();

//	std::cout.precision(std::numeric_limits<T>::max_digits10);
//	std::cout.setf(std::ios_base::scientific);
//	for (auto const dist : distribution)
//	{
//		std::cout << "std::make_tuple(" << dist.value() << ", " << dist.error()
//			<< "),\n";
//	}

	// TODO: check `mid_points()`

	for (std::size_t i = 0; i != 100; ++i)
	{
		EXPECT_DOUBLE_EQ( distribution.at(i).value() , std::get<0>(reference.at(i)) );
		EXPECT_DOUBLE_EQ( distribution.at(i).error() , std::get<1>(reference.at(i)) );
		EXPECT_EQ( distribution.at(i).calls() , calls );
	}
}
